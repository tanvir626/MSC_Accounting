// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Accounting_Module.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Accounting_Module.Models
{
    public partial class AccountsDBContext
    {
        private IAccountsDBContextProcedures _procedures;

        public virtual IAccountsDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AccountsDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAccountsDBContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class AccountsDBContextProcedures : IAccountsDBContextProcedures
    {
        private readonly AccountsDBContext _context;

        public AccountsDBContextProcedures(AccountsDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<AC_GetCashNBankBookDataResult>> AC_GetCashNBankBookDataAsync(int? accountID, DateTime? fromDate, DateTime? toDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = fromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = toDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AC_GetCashNBankBookDataResult>("EXEC @returnValue = [dbo].[AC_GetCashNBankBookData] @AccountID = @AccountID, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AC_GetOpeningBalanceAsync(string voucherTable, string accountID, string tillDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Size = 40,
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TillDate",
                    Size = 40,
                    Value = tillDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AC_GetOpeningBalance] @VoucherTable = @VoucherTable, @AccountID = @AccountID, @TillDate = @TillDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> AC_GetTrialBalanceAsync(string accTable, string voucherTable, string fromDate, string toDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 40,
                    Value = fromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 40,
                    Value = toDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[AC_GetTrialBalance] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_Create_AccountAsync(string accTableName, string accountName, string accountCode, string isMaster, string isParent, string label, string openingBalance, string parentID, string status, string companyID, string createUserID, string createDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTableName",
                    Size = 40,
                    Value = accTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountName",
                    Size = 100,
                    Value = accountName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountCode",
                    Size = 100,
                    Value = accountCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsMaster",
                    Size = 2,
                    Value = isMaster ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsParent",
                    Size = 2,
                    Value = isParent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Label",
                    Size = 100,
                    Value = label ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OpeningBalance",
                    Size = 100,
                    Value = openingBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentID",
                    Size = 100,
                    Value = parentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Size = 100,
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateUserID",
                    Size = 40,
                    Value = createUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateDate",
                    Size = 100,
                    Value = createDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_Create_Account] @AccTableName = @AccTableName, @AccountName = @AccountName, @AccountCode = @AccountCode, @IsMaster = @IsMaster, @IsParent = @IsParent, @Label = @Label, @OpeningBalance = @OpeningBalance, @ParentID = @ParentID, @Status = @Status, @CompanyID = @CompanyID, @CreateUserID = @CreateUserID, @CreateDate = @CreateDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_Create_VoucherAsync(string accTableName, string costCenterID, string voucherNumber, string voucherDate, string accountID, string paymentMode, string receiveChequeNo, string receiveChequeDate, string debitAmount, string creditAmount, string description, string bankID, string bankAccountName, string chequeNo, string chequeDate, string cash, string isOpening, string refNo, string postedFrom, string module, string userID, string status, string companyID, string createUserID, string createDate, string approvedBy, string approvedDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTableName",
                    Size = 40,
                    Value = accTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CostCenterID",
                    Size = 40,
                    Value = costCenterID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherNumber",
                    Size = 40,
                    Value = voucherNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherDate",
                    Size = 40,
                    Value = voucherDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Size = 40,
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PaymentMode",
                    Size = 40,
                    Value = paymentMode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceiveChequeNo",
                    Size = 40,
                    Value = receiveChequeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReceiveChequeDate",
                    Size = 40,
                    Value = receiveChequeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DebitAmount",
                    Size = 40,
                    Value = debitAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditAmount",
                    Size = 40,
                    Value = creditAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankID",
                    Size = 40,
                    Value = bankID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BankAccountName",
                    Size = 100,
                    Value = bankAccountName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChequeNo",
                    Size = 40,
                    Value = chequeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChequeDate",
                    Size = 40,
                    Value = chequeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cash",
                    Size = 40,
                    Value = cash ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsOpening",
                    Size = 40,
                    Value = isOpening ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RefNo",
                    Size = 40,
                    Value = refNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PostedFrom",
                    Size = 40,
                    Value = postedFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Module",
                    Size = 40,
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserID",
                    Size = 40,
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 40,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Size = 40,
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateUserID",
                    Size = 40,
                    Value = createUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateDate",
                    Size = 40,
                    Value = createDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovedBy",
                    Size = 40,
                    Value = approvedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovedDate",
                    Size = 40,
                    Value = approvedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_Create_Voucher] @AccTableName = @AccTableName, @CostCenterID = @CostCenterID, @VoucherNumber = @VoucherNumber, @VoucherDate = @VoucherDate, @AccountID = @AccountID, @PaymentMode = @PaymentMode, @ReceiveChequeNo = @ReceiveChequeNo, @ReceiveChequeDate = @ReceiveChequeDate, @DebitAmount = @DebitAmount, @CreditAmount = @CreditAmount, @Description = @Description, @BankID = @BankID, @BankAccountName = @BankAccountName, @ChequeNo = @ChequeNo, @ChequeDate = @ChequeDate, @Cash = @Cash, @IsOpening = @IsOpening, @RefNo = @RefNo, @PostedFrom = @PostedFrom, @Module = @Module, @UserID = @UserID, @Status = @Status, @CompanyID = @CompanyID, @CreateUserID = @CreateUserID, @CreateDate = @CreateDate, @ApprovedBy = @ApprovedBy, @ApprovedDate = @ApprovedDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_Edit_AccountAsync(string accTableName, string accountID, string accountName, string accountCode, string isMaster, string isParent, string label, string openingBalance, string parentID, string status, string companyID, string editUserID, string editDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTableName",
                    Size = 40,
                    Value = accTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Size = 40,
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountName",
                    Size = 100,
                    Value = accountName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountCode",
                    Size = 100,
                    Value = accountCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsMaster",
                    Size = 2,
                    Value = isMaster ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsParent",
                    Size = 2,
                    Value = isParent ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "Label",
                    Size = 100,
                    Value = label ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OpeningBalance",
                    Size = 100,
                    Value = openingBalance ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentID",
                    Size = 100,
                    Value = parentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Status",
                    Size = 2,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyID",
                    Size = 100,
                    Value = companyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EditUserID",
                    Size = 40,
                    Value = editUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EditDate",
                    Size = 100,
                    Value = editDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_Edit_Account] @AccTableName = @AccTableName, @AccountID = @AccountID, @AccountName = @AccountName, @AccountCode = @AccountCode, @IsMaster = @IsMaster, @IsParent = @IsParent, @Label = @Label, @OpeningBalance = @OpeningBalance, @ParentID = @ParentID, @Status = @Status, @CompanyID = @CompanyID, @EditUserID = @EditUserID, @EditDate = @EditDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_Edit_VoucherAsync(string accTableName, string voucherAutoID, string accountID, string debitAmount, string creditAmount, string description, string chequeNo, string chequeDate, string editDate, string editUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTableName",
                    Size = 40,
                    Value = accTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherAutoID",
                    Size = 40,
                    Value = voucherAutoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Size = 40,
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DebitAmount",
                    Size = 40,
                    Value = debitAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreditAmount",
                    Size = 40,
                    Value = creditAmount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = -1,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChequeNo",
                    Size = 40,
                    Value = chequeNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ChequeDate",
                    Size = 40,
                    Value = chequeDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EditDate",
                    Size = 40,
                    Value = editDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EditUserID",
                    Size = 40,
                    Value = editUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_Edit_Voucher] @AccTableName = @AccTableName, @VoucherAutoID = @VoucherAutoID, @AccountID = @AccountID, @DebitAmount = @DebitAmount, @CreditAmount = @CreditAmount, @Description = @Description, @ChequeNo = @ChequeNo, @ChequeDate = @ChequeDate, @EditDate = @EditDate, @EditUserID = @EditUserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GenerateAccountCodeAsync(string tableName, string parentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 40,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentID",
                    Size = 40,
                    Value = parentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GenerateAccountCode] @TableName = @TableName, @ParentID = @ParentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACC_GenerateBalanceSheetResult>> ACC_GenerateBalanceSheetAsync(string dateFrom, string dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 50,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 50,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACC_GenerateBalanceSheetResult>("EXEC @returnValue = [dbo].[ACC_GenerateBalanceSheet] @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GenerateVoucherIDAsync(string tableName, string type, string prefix, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 40,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Type",
                    Size = 100,
                    Value = type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Prefix",
                    Size = 8,
                    Value = prefix ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GenerateVoucherID] @TableName = @TableName, @Type = @Type, @Prefix = @Prefix", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GET_AccountLocationAsync(string accTableName, string accountID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTableName",
                    Size = 40,
                    Value = accTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Size = 40,
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GET_AccountLocation] @AccTableName = @AccTableName, @AccountID = @AccountID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GET_AccountTreeAsync(string tableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 40,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GET_AccountTree] @TableName = @TableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACC_GET_AccountTreeByCodeResult>> ACC_GET_AccountTreeByCodeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACC_GET_AccountTreeByCodeResult>("EXEC @returnValue = [dbo].[ACC_GET_AccountTreeByCode]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetAccountListAsync(string tableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 40,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetAccountList] @TableName = @TableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetAccountScheduleReportAsync(string accTable, string voucherTable, string startDate, string endDate, string parentCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 40,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 40,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ParentCode",
                    Size = 40,
                    Value = parentCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetAccountScheduleReport] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @StartDate = @StartDate, @EndDate = @EndDate, @ParentCode = @ParentCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACC_GetBalanceSheetLevelWiseDataResult>> ACC_GetBalanceSheetLevelWiseDataAsync(string dateFrom, string dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Size = 50,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Size = 50,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACC_GetBalanceSheetLevelWiseDataResult>("EXEC @returnValue = [dbo].[ACC_GetBalanceSheetLevelWiseData] @DateFrom = @DateFrom, @DateTo = @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetIncomeStatementAsync(string accTable, string voucherTable, string startDate, string endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 40,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 40,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetIncomeStatement] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @StartDate = @StartDate, @EndDate = @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetSubsidiaryLedgerDataAsync(string accTable, string voucherTable, string accountID, string fromDate, string toDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Size = 40,
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Size = 40,
                    Value = fromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Size = 40,
                    Value = toDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetSubsidiaryLedgerData] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @AccountID = @AccountID, @FromDate = @FromDate, @ToDate = @ToDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetTempVoucherListAsync(string accTableName, string createUserID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTableName",
                    Size = 40,
                    Value = accTableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreateUserID",
                    Size = 40,
                    Value = createUserID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetTempVoucherList] @AccTableName = @AccTableName, @CreateUserID = @CreateUserID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetUsableAccountListAsync(string tableName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TableName",
                    Size = 40,
                    Value = tableName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetUsableAccountList] @TableName = @TableName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetVoucherByIDAsync(string accTable, string voucherTable, string voucherNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherNo",
                    Size = 40,
                    Value = voucherNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetVoucherByID] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @VoucherNo = @VoucherNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetVoucherDetailsAsync(string accTable, string voucherTable, string startDate, string endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 40,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 40,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetVoucherDetails] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @StartDate = @StartDate, @EndDate = @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ACC_GetVoucherInfoListAsync(string accTable, string voucherTable, string startDate, string endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AccTable",
                    Size = 40,
                    Value = accTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VoucherTable",
                    Size = 40,
                    Value = voucherTable ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 40,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 40,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ACC_GetVoucherInfoList] @AccTable = @AccTable, @VoucherTable = @VoucherTable, @StartDate = @StartDate, @EndDate = @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACC_Rpt_ReceivePaymentsResult>> ACC_Rpt_ReceivePaymentsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACC_Rpt_ReceivePaymentsResult>("EXEC @returnValue = [dbo].[ACC_Rpt_ReceivePayments]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ACC_Rpt_ReceivePayments_InsertResult>> ACC_Rpt_ReceivePayments_InsertAsync(string colName, int? accountID, decimal? amount, string groupType, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ColName",
                    Size = 40,
                    Value = colName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AccountID",
                    Value = accountID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Amount",
                    Precision = 10,
                    Scale = 2,
                    Value = amount ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "GroupType",
                    Size = 40,
                    Value = groupType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ACC_Rpt_ReceivePayments_InsertResult>("EXEC @returnValue = [dbo].[ACC_Rpt_ReceivePayments_Insert] @ColName = @ColName, @AccountID = @AccountID, @Amount = @Amount, @GroupType = @GroupType", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
